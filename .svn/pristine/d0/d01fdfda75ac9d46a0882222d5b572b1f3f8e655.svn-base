<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<!-- 背景动画 以及初始化样式 -->
		<link rel="stylesheet" type="text/css" href="../css/normalize.css" />
		<link rel="stylesheet" type="text/css" href="../css/demo.css">
		<link rel="stylesheet" type="text/css" href="../css/style.css">
		<!-- 页面样式 -->
		<link href="../css/doc_dst.css" rel="stylesheet" type="text/css" />
		<link href="../css/layoutStyle.css" rel="stylesheet" type="text/css" />
		<!-- 导入vue.js -->
		<script src="../js/vue.js"></script>
		<!-- <script src="../js/vue.min.js"></script> -->
		<!-- <script type="text/javascript" src="../js/vue.min.js"></script> -->
		<!-- 引入jQuery.js -->
		<script src="../js/jquery/jquery.min.js"></script>
		<title>神经心理辅助诊疗系统</title>
	</head>
	<body>
		<!-- 背景 -->
		<div class="satic-area">
			<div class="dynamic-area1"></div>
			<div class="dynamic-area2"></div>
		</div>

		<div id="content" class=" vue">

			<div class="scale scale-Title">
				<!-- 临时使用 -->
				<!-- <div id="next-scale" style="bottom: 0;color: green;font-size: 24px;">
					
				</div> -->

				<div id="title">
					<span>量表名称：{{titleName.aiScaleName}}</span>
					<div class="" v-if="isFinish==1">
						<span onclick="next_scale()" style="margin-right: 40px;">下一个量表</span>
						<span  @click="printPDF()">打印报告</span>
					</div>
					
				</div>
				<div class="scale-left flex-layout-aligin" style="width: 70%;justify-content: space-between;">
					<div class="content-title">
						指导语
					</div>
					<div style="padding-bottom: 15px;">
						<span class="little-title">
							{{status == 0 ? '顺背数字广度指导语：':'倒背数字广度指导语：'}}
						</span>
						<span class="little-title-content">
							{{scaleMsg.aiQuestionGuid[status]}}
						</span>
					</div>
					<ul class="flex-layout-j-space-evenly ul" style="justify-content: flex-start;padding-bottom: 15px;">
						<li v-for="(it,index) in scaleMsg.aiQuestionOption[status]">
							<span class="little-title" style="margin: 0;" v-bind:class="[index==pos?'little-title-green':'',index>pos?'little-title-darkgray':'']">
								阶段:{{it}}
							</span>
							<span class="little-title" style="margin: 0;" v-bind:class="[index>=pos?'little-title-darkgray':'']">
								{{index < scaleMsg.aiQuestionOption[status].length-1 ? '→':''}}
								<!--  -->
							</span>
						</li>
					</ul>
					<div class="test-content">
						<div class="test-content-items">
							<div class="items-1">
								{{scaleMsg.aiQuestionContent[status][pos][0]}}
							</div>
							<div class="items-2 little-title-darkgray" v-on:click="t('A')">
								<img :src="R['A']==0?'../svg/checkBox_off_gray.svg':(R['A']==1?'../svg/checkBox_skyblue.svg':'../svg/checkBox_off_gray.svg')"
								 class="transformX">
								正确
							</div>
							<div class="items-2 little-title-darkgray" v-on:click="f('A')">
								<img :src="R['A']==0?'../svg/error_Box.svg':(R['A']==2?'../svg/error_Box_red.svg':'../svg/error_Box.svg')"
								 style="margin-right: 9px;width: 24px;">
								错误
							</div>
						</div>
						<div class="test-content-items">
							<div class="items-1">
								{{scaleMsg.aiQuestionContent[status][pos][1]}}
							</div>
							<div class="items-2 little-title-darkgray" v-on:click="t('B')">
								<!-- <img src="../svg/checkBox_off_gray.svg" class="transformX"> -->
								<img :src="R['B']==0?'../svg/checkBox_off_gray.svg':(R['B']==1?'../svg/checkBox_skyblue.svg':'../svg/checkBox_off_gray.svg')"
								 class="transformX">
								正确
							</div>
							<div class="items-2 little-title-darkgray" v-on:click="f('B')">

								<img :src="R['B']==0?'../svg/error_Box.svg':(R['B']==2?'../svg/error_Box_red.svg':'../svg/error_Box.svg')"
								 style="margin-right: 9px;width: 24px;">
								错误
							</div>
						</div>
					</div>
					<div class="nextGroup">
						<span v-on:click="nGroup($event)">
							{{pos == scaleMsg.aiQuestionOption[status].length - 1?(status == 0 ? '进入倒背测试' : '完成'):(isFinish==1?'已完成':'进入下一组')}}
						</span>

					</div>
				</div>
				<div class="scale-right flex-layout-aligin" style="width: 30%;">
					<div class="content-title">
						量表说明
					</div>
					<div class="little-title-content">
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{titleName.aiScaleOverview[0]}}
					</div>
					<div class="content-title">
						评价
					</div>
					<div class="" style="height: 100%;width: 100%;padding-top: 30px;">
						<div class="little-title-content" style="padding-bottom: 20px;">
							顺背数字正确数：<span style="color: color: rgb(195, 7, 7);">{{allR_A.length}}个</span>
						</div>
						<div class="little-title-content" style="padding-bottom: 40px;">
							倒背数字正确数：<span style="color: color: rgb(195, 7, 7);">{{allR_B.length}}个</span>
						</div>
						<div class="little-title-content">
							总分=&nbsp;&nbsp;{{allR_A.length}}&nbsp;&nbsp;+&nbsp;&nbsp;{{allR_B.length}}&nbsp;&nbsp;=&nbsp;&nbsp; <span class="little-title-redU"
							 style="font-size: 24px;">{{allR_A.length+allR_B.length}}分</span>

						</div>
					</div>
				</div>
			</div>
		</div>
	</body>

	<script src="../js/toJump.js"></script>
	<script src="utils/Storage.js"></script>
	<script src="config/urlConfig.js"></script>
	<script>
		//const USER_ID = window.location.search.split('?')[1].split(0, 1).join("");
		const USER_ID = 22;
		let reg_1 = /&/;
		let reg_2 = /\$/;
		let reg_3 = /split;/;
		let scaleData = {
			aiScaleId: '',
			aiScaleName: '',
			aiScaleOverview: [],
			aiScaleNotice: []
		};
		let scaleMsg = {
			aiQuestionAnswerDescribe: '',
			aiQuestionContent: [
				[
					[]
				],
				[
					[]
				]
			],
			aiQuestionGuid: '',
			aiQuestionId: '',
			aiQuestionNotice: '',
			aiQuestionOption: [
				[],
				[]
			],
			aiQuestionType: '',
			aiScaleId: '',
			aiScoreMethodName: '',
		};
		/**
		 * 数据初始化
		 */

		$(document).ready(function() {
			$.ajax({
				url: config.url + '/scales/testMsg/' + 13,
				type: 'GET',
				success: function(e) {
					let m = e.object[0];
					console.log(m, 'm')
					let o = {};
					for (i in m) {
						o[i] = m[i];
						if (reg_1.test(m[i])) {
							o[i] = m[i].slice(0).split('&');
							if (reg_2.test(m[i])) {
								for (let n = 0; n < o[i].length; n++) {
									o[i][n] = o[i][n].slice(0).split('$');
									for (let j = 0; j < o[i][n].length; j++) {
										if (reg_3.test(m[i])) {
											o[i][n][j] = o[i][n][j].slice(0).split('split;')
										}
									}
								}
							}
						} else o[i] = m[i];

					}
					vue.scaleMsg = o;
					console.log(o, 'ooo')
				},
				error: function() {
					console.log('连接服务器超时');
				}
			})
		});
		let vue = new Vue({
			el: '.vue',
			data: {
				titleName: scaleData,
				status: 0,
				scaleMsg: scaleMsg,
				pos: 0, //当前阶段index，默认0
				allR_A: [], //顺背结果集
				allR_B: [], //倒背结果集合
				R: {
					"A": 0, //0表示未选择，1表示选择正确标志，2表示选择错误标志
					"B": 0, //0表示未选择，1表示选择正确标志，2表示选择错误标志
					"r": 0, //是否有选完整
				}, //当前选中结果
				isFinish: 0, //量表是否完成，默认0
				RESULT_DATA: { //需要打印的结果信息
					id: 13,
					allResult: [],
					bottomMsg: []
				},
				theEnd:$.ajax({
					url:'../JSON/report_config.json',
					async:false
				}).responseJSON.scale_13,
				userMsg: sstorage.getItem("userMsg") //用户信息
			},
			created() {
				console.log('用户信息', this.userMsg)
			},
			methods: {
				printPDF(){
					window.open("report/report.html?" + USER_ID)
				},
				
				t: function(e) {
					if (this.isFinish != 0)
						return
					if (this.R[e] != 1) {
						this.R[e] = 1;
					} else if (this.R[e] == 1) {
						this.R[e] = 0;
						console.log(e, this.R, 'ttt')
					}
					if (this.R['A'] != 0 && this.R['B'] != 0)
						this.R['r'] = 1;
					else this.R['r'] = 0;

				},
				f: function(e) {
					if (this.isFinish != 0)
						return
					if (this.R[e] != 2) {
						this.R[e] = 2;
					} else if (this.R[e] == 2) {
						this.R[e] = 0;
						console.log(e, this.R, 'fff')
					}
					if (this.R['A'] != 0 && this.R['B'] != 0)
						this.R['r'] = 1;
					else this.R['r'] = 0;
				},
				nGroup: function(e) {
					let srcEle = e.srcElement;
					let a =false;
					if (this.isFinish == 1)
						return;
					if (srcEle.innerHTML.replace(/(^\s*)|\s*$/g, '') == '完成') {
						console.log('已完成')
						this.isFinish = 1;

					}

					if (srcEle.innerHTML.replace(/(^\s*)|\s*$/g, '') == '进入倒背测试') {
						this.pos = 0;
						this.status = 1;

						return
					}


					if (this.R['r'] == 0) {
						alert('请完成内容');
						return;
					} else {
						console.log(this.R)
						if (this.status == 0) {
							if (this.R['A'] == 1) {
								let o = {};
								o.pos = this.pos;
								o.A = 1;
								this.allR_A.push(o)
							}
							if (this.R['B'] == 1) {
								let o = {};
								o.pos = this.pos;
								o.B = 1;
								this.allR_A.push(o)
							}
							if (this.R['A'] == 2 && this.R['B'] == 2 || this.pos == this.scaleMsg.aiQuestionOption[this.status].length -
								1) {
								alert('已结束，即将进入下一组');
								a = true;
								this.pos = 0;
							}

						} else if (this.status = 1) {
							if (this.R['A'] == 1) {
								let o = {};
								o.pos = this.pos;
								o.A = 1;
								this.allR_B.push(o)
							}
							if (this.R['B'] == 1) {
								let o = {};
								o.pos = this.pos;
								o.B = 1;
								this.allR_B.push(o)
							}
							if (this.R['A'] == 2 && this.R['B'] == 2 || this.pos == this.scaleMsg.aiQuestionOption[this.status].length -
								1) {
								alert('测验结束');
								this.isFinish = 1;

							}

						}
						console.log(this.allR_A, this.allR_B)
					}

					let allResult_item = [];
					let ai_2 = [];
					let serviceImg = [];
					let bottomMsg = ""; //最后结论
					/**
					 * 后期需要将标准图加上
					 */
					if (this.status == 0) {
						allResult_item[0] = "顺背得分"; //项目名
						allResult_item[1] = this.allR_A.length;
						this.RESULT_DATA.allResult[0]=(allResult_item);
					} else {
						allResult_item[0] = "倒背得分"
						allResult_item[1] = this.allR_B.length;
						ai_2[0] = "总分";
						ai_2[1] = this.allR_A.length + this.allR_B.length;
						this.RESULT_DATA.allResult[1]=(allResult_item);
						this.RESULT_DATA.allResult[2]=(ai_2);
						for (let i = 0; i < this.theEnd.methods.length; i++) {
							if (this.allR_A.length + this.allR_B.length >= this.theEnd.methods[i].min &&
								this.allR_A.length + this.allR_B.length <= this.theEnd.methods[i].max) {
								bottomMsg = this.theEnd.methods[i].tzms;
								this.RESULT_DATA.bottomMsg[0]=bottomMsg;
							}

						}
					}
					console.log(this.RESULT_DATA,'打印内容')
					sstorage.setItem('&13', this.RESULT_DATA);

					if(a)
						this.status = 1;
					if (srcEle.innerHTML.replace(/(^\s*)|\s*$/g, '') == '进入倒背测试') {
						this.pos = 0;
						this.status = 1;
						for (i in this.R)
							this.R[i] = 0;
						return
					} else if (srcEle.innerHTML.replace(/(^\s*)|\s*$/g, '') == '进入下一组') {

						this.pos++;
						for (i in this.R)
							this.R[i] = 0;
					}
				}

			}
		})




		//获取量表基本信息(首页)
		var scales = sstorage.getItem("scaleRest");

		for (let i = 0; i < scales.items.length; i++) {
			if (scales.items[i].aiScaleId == 13) {
				scaleData.aiScaleId = scales.items[i].aiScaleId;
				scaleData.aiScaleName = scales.items[i].aiScaleName;
				let notice, overView;
				if (scales.items[i].aiScaleNotice)
					notice = scales.items[i].aiScaleNotice.split('&');
				if (scales.items[i].aiScaleOverview)
					overView = scales.items[i].aiScaleOverview.split('&');
				//scaleData.index.aiScaleNotice = (notice);
				scaleData.aiScaleOverview = (overView);
			}
		}

	let ws = new WebSocket(config.wsURL+'/websocket/'+USER_ID)
		function next_scale() {
			console.log(scales)
			if (vue.isFinish != 0) {
				let ind = -1;
				for (let i = 0; i < scales.items.length; i++) {
					if (scales.items[i].aiScaleId == 13)
						ind = i;
				}
				
				let o = {
					target:vue.userMsg.aiUserId,
					status:3,
					from_who:USER_ID
				}
				ws.send(JSON.stringify(o))
				if (ind + 1 == scales.items.length) {
					window.location.href = 'finish.html'
				} else {
					toJump(scales.items[ind + 1].aiScaleId)
				}
			
			} else {
				alert('您还有未完成的内容');
			}
		}
		console.log(scaleData, 'scaleData')
	</script>
</html>
