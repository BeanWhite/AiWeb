<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">

		<title>神经心理辅助诊疗系统</title>
		<script src="config/userConfig.js"></script>
		<!-- 背景动画 以及初始化样式 -->
		<link rel="stylesheet" type="text/css" href="../css/normalize.css" />
		<link rel="stylesheet" type="text/css" href="../css/demo.css">
		<link rel="stylesheet" type="text/css" href="../css/style.css">
		<!-- 页面样式 -->
		<link href="../css/doc_ravlt.css" rel="stylesheet" type="text/css" />
		<link href="../css/layoutStyle.css" rel="stylesheet" type="text/css" />
		<!-- 导入vue.js -->
		<script src="../js/vue.js"></script>
		<!-- <script src="../js/vue.min.js"></script> -->
		<!-- <script type="text/javascript" src="../js/vue.min.js"></script> -->
		<!-- 引入jQuery.js -->
		<script src="../js/jquery/jquery.min.js"></script>
	</head>

	<body>
		<!-- 背景 -->
		<div class="satic-area">
			<div class="dynamic-area1"></div>
			<div class="dynamic-area2"></div>
		</div>

		<div id="content" class=" vue">
			<div class="dialog-back dialog-off" v-bind:class="[showDialog.length>0?'on':'']"></div>
			<div class="scale scale-Title">
				<!-- 临时使用 -->
				<!-- <div id="next-scale">
					<button type="button" onclick="stopTest()">完成</button>
					<button type="button" onclick="next_scale()">下一个</button>
				</div> -->
				<div class="dialog-content-s" v-bind:class="[showDialog[0]==0?'on':'']">
					<div class="dialog-content-s-top"></div>
					<div class="dialog-content-s-main">
						{{scaleMsg.aiQuestionGuid[2]}}
					</div>
					<div class="dialog-content-s-button">
						<div class="s-button" v-on:click="dia_1()">
							<span>已告知</span>
							
						</div>
					</div>
				</div>
				<div id="title">
					<span>量表名称：{{titleName.aiScaleName}}-认知</span>
					<div class="">
						<span id="f" style="margin-right: 20px;" class="finishTest off" :style="{display:(long_status == 3?'initial':'')}" @click="next_scale()">下一个测评</span>
						<span class="finishTest off" :style="{display:(long_status == 3?'initial':'')}" v-on:click="printPdf">打印</span>
					</div>
					
				</div>
				<div class="scale-left flex-layout-aligin scrollbar" style="width: 70%;justify-content: space-between;overflow: overlay;">
					<div class="content-title">
						指导语
					</div>
					<div class="third-content" v-bind:class="[long_status==-1?'':(long_status == 3?'':'off')]">
						<div class="little-title-content">{{long_status == 3?scaleMsg.aiQuestionGuid[4]:scaleMsg.aiQuestionGuid[0]}}</div>
						<div class="little-title-content" v-bind:class="[long_status==-1?'':'off']">
							{{scaleMsg.aiQuestionNotice}}
						</div>
					</div>
					<ul class="groupN ul" style="height: auto;" v-bind:class="[long_status==-1?'':'off']">
						<li v-for="(it,index) in groupName[wGrop]">
							<span class="little-title" style="margin: 0;" v-bind:class="[pos==index?'little-title-green':'',
							 index>=pos?'little-title-darkgray':'']">
								{{it}}
							</span>
							<span class="little-title" style="margin: 0;" v-bind:class="[index>=pos?'little-title-darkgray':'']">
								{{index > 0?(index < groupName[wGrop].length-1?'→':''):''}}
								<!--  	-->
							</span>
						</li>
					</ul>
					<ul class="flex-layout-j-space-between ul" style="flex-wrap: wrap;height: auto;padding-top: 26px;" :style="{display:(long_status==-1?'':'none')}">
						<li v-for="(it,index) in scaleMsg.aiQuestionContent[wGrop]" class="content-0 flex-layout-aligin border-top-darkgray border-right-darkgray border-bottom-darkgray"
						 style="width: 20%;justify-content: space-evenly;" v-bind:class="[(index+1)%5==1?'border-left-darkgray':'']">
							<div class="word-items" v-bind:class="[LClick_A.indexOf(index)>-1?'pink-bgc':'']" v-on:click="LClick(index)">
								<span class="little-title-darkgray" v-bind:class="[LClick_A.indexOf(index)>-1?'colorBlack':'']">{{it}}</span>
								<div class="word-items-icon" v-bind:class="[Click_pos==index?'':'off']">
									<div class="icon-des">
										点击并朗读
									</div>
									<img src="../svg/pointer.svg" class="transformY">
								</div>
							</div>

							<div class="line-darkgray"></div>
							<div class="word-items" v-on:click="LClick_icon(index)">
								<img v-bind:class="LClick_A_icon.indexOf(index)>-1?'':'transformX'" :src="LClick_A_icon.indexOf(index)>-1?'../svg/checkBox_on.svg':'../svg/checkBox_off_gray.svg'">
							</div>
						</li>
					</ul>
					<ul :style="{display:(long_status == 3?'flex':'none')}" class="flex-layout-j-space-between ul" style="flex-wrap: wrap;height: auto;padding-top: 26px;">
						<li style="width: 10%;justify-content: space-evenly;" v-for="(it,index) in scaleMsg.aiQuestionContent[0]" 
						class="content-0 flex-layout-aligin border-top-darkgray border-right-darkgray border-bottom-darkgray border-bottom-darkgray"
						 v-bind:class="[(index+1)%10==1?'border-left-darkgray':'']">
							<div class="word-items" v-bind:class="[LClick_A.indexOf(index)>-1?'pink-bgc':'']" v-on:click="LClick(index)">
								<span class="little-title-darkgray" v-bind:class="[LClick_A.indexOf(index)>-1?'colorBlack':'']">{{it}}</span>
								<div class="word-items-icon" v-bind:class="[Click_pos==index?'':'off']">
									<div class="icon-des">
										点击并朗读
									</div>
									<img src="../svg/pointer.svg" class="transformY">
								</div>
							</div>
							<div class="line-darkgray"></div>
							<div class="word-items" v-on:click="LClick_icon(index)">
								<img v-bind:class="LClick_A_icon.indexOf(index)>-1?'':'transformX'" :src="LClick_A_icon.indexOf(index)>-1?'../svg/checkBox_on.svg':'../svg/checkBox_off_gray.svg'">
							</div>
						</li>
						<li style="width: 10%;justify-content: space-evenly;" v-for="(it,index) in scaleMsg.aiQuestionContent[1]" 
						class="content-0 flex-layout-aligin border-top-darkgray border-right-darkgray border-bottom-darkgray border-bottom-darkgray"
						 v-bind:class="[(index+1+scaleMsg.aiQuestionContent[0].length)%10==1?'border-left-darkgray':'']">
							<div class="word-items" v-bind:class="[LClick_A.indexOf(index+15)>-1?'pink-bgc':'']" v-on:click="LClick(index+15)">
								<span class="little-title-darkgray" v-bind:class="[LClick_A.indexOf(index+15)>-1?'colorBlack':'']">{{it}}</span>
								<div class="word-items-icon" v-bind:class="[Click_pos==index+15?'':'off']">
									<div class="icon-des">
										点击并朗读
									</div>
									<img src="../svg/pointer.svg" class="transformY">
								</div>
							</div>
							<div class="line-darkgray"></div>
							<div class="word-items" v-on:click="LClick_icon(index+15)">
								<img v-bind:class="LClick_A_icon.indexOf(index+15)>-1?'':'transformX'" :src="LClick_A_icon.indexOf(index+15)>-1?'../svg/checkBox_on.svg':'../svg/checkBox_off_gray.svg'">
							</div>
						</li>
					</ul>
					<div class="timerContent" :style="{display:(long_status>=1?(long_status<3?'flex':''):'')}">
						倒计时:
						<span :style="{color:(long_status == 2?'rgb(195, 7, 7)':'')}">
							{{timerMinutes < 10 ? '0':''}}{{timerMinutes}}:{{timerSeconds < 10 ? '0':''}}{{timerSeconds}}.{{timerNum < 10 ? '0':''}}{{timerNum}}
						</span>
						<!--  -->
					</div>
					<div class="bottom-fun">
						<span class="little-title-green cursorPointer" v-on:click="toNext($event)" :style="{color:(long_status == 2 ?'rgb(195, 7, 7)':(long_status == 1 ?'darkgray':'')),display:(long_status==3?'none':'')}">进入下一组</span>
					</div>
				</div>
				<div class="scale-right scrollbar" style="overflow: overlay;">
					<div class="content-title">
						{{isOp == 1 ? '评价':'量表说明'}}
					</div>
					<div class="off little-title-content" :style="{display:(isOp==1?'initial':'')}" style="width: 100%;padding-top: 15px;">
						{{scaleMsg.aiQuestionAnswerDescribe}}
					</div>
					<div class="flex-layout-j-space-evenly"  
					style="height: 100%;flex-wrap: wrap;justify-content: flex-start;align-items: flex-start;padding-top: 20px;">
						<span class="off little-title-content" :style="{display:(isOp==0?'initial':'')}">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{titleName.aiScaleOverview[0]}}</span>
						
						<div class="off flex-layout-aligin" :style="{display: (isOp==1?'initial':'none')}"
						 style="width: 50%;height:auto ;justify-content: flex-start;align-items: flex-start;">
							<div v-for="(it,index) in groupName[2]" v-bind:class="[index==0?'little-title':'scoreBlack']" style="padding-bottom: 20px;">
								{{it}} {{index > 0 ? allR_A[index-1].length:''}}{{index > 0 ? '分':''}}
							</div>
						</div>
						<div class="off flex-layout-aligin" :style="{display: (isOp==1?'initial':'none')}" 
						style="width: 50%;height: 50%;justify-content: flex-start;align-items: flex-start;">
							<div v-for="(it,index) in groupName[3]" v-bind:class="[index==0?'little-title':'scoreBlack']"  style="padding-bottom: 20px;">
								{{it}} {{index > 0 ? allR_B[index-1].length:''}}{{index > 0 ? '分':''}}
							</div>
						</div>
						<div class="off flex-layout-aligin" :style="{display: (isOp==1?'initial':'none')}" 
						style="width: 50%;height: auto ;justify-content: flex-start;align-items: flex-start;">
							<div v-for="(it,index) in groupName[4]" v-bind:class="[index==0?'little-title':'scoreBlack']" style="padding-bottom: 20px;">
								{{it}}
							</div>
							<div class="scoreBlack" style="padding-bottom: 20px;">
								<span>得分：</span> <span>{{all_AB.length}}分</span>
							</div>
						</div>
						
					</div>
					
				</div>
			</div>
		</div>

	</body>
	<script src="../js/toJump.js"></script>
	<script src="utils/Storage.js"></script>
	<script src="config/urlConfig.js"></script>
	<script>
		//const USER_ID = window.location.search.split('?')[1].split(0, 1).join("");
		// let USER_ID = sstorage.getItem('logins');
		// if(USER_ID==null||USER_ID==undefined)
		// 	location.href = '../index.html'
		// USER_ID = USER_ID.id
		/**
		 * 数据初始化
		 */



		//获取量表基本信息(首页)
		
		
		$(document).ready(function() {
			$.ajax({
				url: config.url + '/scales/testMsg/' + 12,
				type: 'GET',
				success: function(e) {
					let m = e.object[0];
					console.log(m, 'm')
					let o = {};
					for (i in m) {
						o[i] = m[i];
						if (reg_1.test(m[i])) {
							o[i] = m[i].split('&');
							if (reg_2.test(m[i])) {
								for (let n = 0; n < o[i].length; n++) {
									o[i][n] = o[i][n].split('$');
									for(let j=0;j<o[i][n].length;j++){
										if (reg_3.test(m[i])) {
									 	o[i][n][j] = o[i][n][j].slice(0).split('split;')
									 }
									}
								}
							}
						} else o[i] = m[i];

					}
					console.log(o, 'ooo')
					vue.scaleMsg = o;
				},
				error: function() {
					console.log('连接服务器超时');
				}
			});
		});
		/**
		 * 量表基本信息
		 */

		let scaleData = {
			aiScaleId: '',
			aiScaleName: '',
			aiScaleOverview: [],
			aiScaleNotice: []
		};
		let scaleMsg = {
			aiQuestionAnswerDescribe: '',
			aiQuestionContent: '',
			aiQuestionGuid: [
				[]
			],
			aiQuestionId: '',
			aiQuestionNotice: '',
			aiQuestionOption: '',
			aiQuestionType: '',
			aiScaleId: '',
			aiScoreMethodName: '',
		};
		let reg_1 = /&/;
		let reg_2 = /\$/;
		let reg_3 = /split;/;
		
		let vue = new Vue({
			el: '.vue',
			data: {
				titleName: scaleData, //量表名称
				scaleMsg: scaleMsg, //题目信息
				groupName: [
					['A组词语-', '第一遍', '第二遍', '第三遍', '第四遍', '第五遍'],
					['B组词语-', '第一遍', '第二遍', '第三遍', '第四遍', '第五遍'],
					['A组词语:', '第一遍：', '第二遍：', '第三遍：', '第四遍：', '第五遍：'],
					['B组词语:', '第一遍：', '第二遍：', '第三遍：', '第四遍：', '第五遍：'],
					['长延迟回忆:']
				],
				showDialog: [], //弹出窗口
				isOp:0,		//是否执行过任何操作，默认0
				pos: 1, //当前组位置，默认1,共5组
				wGrop: 0, //当前组号***
				groups: [0], //已经完成的组
				LClick_A: [], //存放A组点击的item
				LClick_A_icon: [], //存放图标item记录
				Click_pos: 0, //当前手指所在位置
				srcEle: '',
				allR_A: [[],[],[],[],[],[],[],[]], //存放A组每次结果
				allR_B: [[],[],[],[],[],[],[],[]], //存放B组每次结果
				all_AB: [],	//存放延迟结果
				timer: null, //计时器
				timerNum: 0, //小数点后两位
				timerMinutes: 0, //分钟
				timerSeconds: 3, //秒
				long_status: -1, //长延迟回忆状态，0开始，1进行中，2结束,-1准备中,3进入下一环节***
				reportTime:null,//完成时间
				userMsg:sstorage.getItem('userMsg'),
				obj:$.ajax({
					url:'../JSON/report_config.json',
					async:false
				}).responseJSON.scale_12.methods,
				isReport:false,
				websocket:null
				
			},
			created(){
				this.websocket =new WebSocket(config.wsURL + '/websocket/' + USER_ID);
				let x = -1;
				for (let i = 0; i < scales.items.length; i++) {
					if (scales.items[i].aiScaleId == 12)
						x = i;
				}
				if (x + 1 == scales.items.length) {
					document.getElementById('f').style.display = 'none'
				}
			},
			methods: {
				LClick: function(e) {		//单词点击		
					if (e != this.Click_pos)
						return;
					if(this.isOp == 0)
						this.isOp = 1;
					this.LClick_A.push(e);
					this.Click_pos++;
				},
				LClick_icon: function(e) {	//图标点击
					let L = this.scaleMsg.aiQuestionContent[0].length;
					if(this.long_status == 3)
						L = L*2;
					if (this.LClick_A.length < L)
						return;
					let i = this.LClick_A_icon.indexOf(e);
					if (i > -1)
						this.LClick_A_icon.splice(i, 1);
					else
						this.LClick_A_icon.push(e);
					if(this.wGrop==0){
						this.allR_A[this.pos-1] = this.LClick_A_icon.slice(0);
					}else if(this.wGrop == 1&&this.long_status!=3){
						this.allR_B[this.pos-1] = this.LClick_A_icon.slice(0);
					}else {
						this.all_AB = this.LClick_A_icon.slice(0);
					}
					
				},
				toNext: function(e) {	//进入下一组
					if(this.long_status == 1)
						return;
					let s = e.srcElement;
					this.srcEle = s;
					
					if (s.innerHTML == '进入下一组') {
						/**
						 * 发布时去掉注释
						 */
						if(this.LClick_A.length<this.scaleMsg.aiQuestionContent[0].length){
							alert('请先完成内容')
							return;
						}
						this.pos++;
						this.LClick_A_icon.splice(0);
						this.LClick_A.splice(0);
						this.Click_pos = 0;
					}

					if (s.innerHTML == '→进入B组') {
						this.showDialog.push(0);
						this.LClick_A_icon.splice(0);
						this.pos = 1;
						this.LClick_A.splice(0);
						this.Click_pos = 0;

					}
					if (s.innerHTML == '→进入长延迟回忆') {
						this.LClick_A_icon.splice(0);
						this.LClick_A.splice(0)
						if (this.long_status == -1) {
							this.long_status = 0;
						}
						if (this.long_status == 0) {
							console.log('计时开始')
							this.long_status = 1;
							let that = this;
							this.timer = setInterval(function() {
								that.timerNum--;
								if (that.timerNum == -1) {
									that.timerNum = 99;
									that.timerSeconds--;
									if (that.timerSeconds == -1) {
										that.timerSeconds = 59;
										that.timerMinutes--;
									}
								}
								that.timerListerner();
							}, 10);
						}
						if (this.long_status == 2) {
							this.long_status = 3;
							for(let u=0;u<30;u++){
								
								this.LClick_A.push(u);
								this.Click_pos++;
							}
						}
					}
					if (this.pos == 5) {
						if (this.wGrop == 0)
							s.innerHTML = '→进入B组'
						else
							s.innerHTML = '→进入长延迟回忆'

					}


				},
				dia_1: function() {	//弹窗1
					this.showDialog.splice(0);
					//this.srcEle.innerHTML = "→进入长延迟回忆"
					this.srcEle.innerHTML = "进入下一组";
					this.wGrop = 1;
				},
				timerListerner: function() {	//计时器监听
					if (this.timerNum == 0 && this.timerSeconds == 0 && this.timerMinutes == 0) {
						clearInterval(this.timer);
						console.log('重置计时器')
						this.long_status = 2;
					}


				},
				fun_Finish: function(){//量表完成
					
					
				},
				printPdf(){
					if(this.isReport==false){
						this.save();
						this.isReport = true;
					}
					window.open("report/report.html")
					var scales = sstorage.getItem("scaleRest");
					let x = -1;
					for (let i = 0; i < scales.items.length; i++) {
						if (scales.items[i].aiScaleId == 12)
							x = i;
					}
					if (x + 1 == scales.items.length) {
						let o = {
							target: this.userMsg.aiUserId,
							status: 3,
							from_who: USER_ID
						}
						this.websocket.send(JSON.stringify(o));
						location.href = 'finish.html'
					}
				},
				next_scale(){
					let o = {
						target: this.userMsg.aiUserId,
						status: 3,
						from_who: USER_ID
					}
					this.websocket.send(JSON.stringify(o));
					this.save()
					if (this.long_status==3){
						let ind=-1;
						for (let i = 0; i < scales.items.length; i++) {
							if (scales.items[i].aiScaleId == 12)
								ind = i;
						}
						if (ind + 1 == scales.items.length) {
							window.location.href = 'finish.html'
						} else {
							toJump(scales.items[ind + 1].aiScaleId)
						}
					} else {
						alert('您还有未完成的内容');
					}
				},
				save(){
					let date = new Date().toLocaleString('chinese',{
						hour12:false
					});
					date = date.replace(/\//g,'-');
					if(this.reportTime==null)
					this.reportTime = date;
					let bottomMsg=[]
					let a = ["即刻记忆"];
					let b =["B组得分(参考项)"];
					let c = ["长延迟回忆","","","","",""];
					let d = ["学习分","","","","",""];
					let e = ["遗忘分","","","","",""]
					for(let i=1;i<this.groupName[0].length;i++){
						a.push(this.allR_A[i-1].length);
						b.push(this.allR_B[i-1].length);
					}
					let f=0,g=0;
					for(let i=1;i<a.length;i++){
						f+=a[i];
						g+=b[i];
					}
					a.push(f);
					b.push(g);
					c.push(this.all_AB.length);
					d.push(this.allR_A[4].length - this.allR_A[0].length);
					e.push(this.allR_A[4].length - this.all_AB.length);
					let result = {
						id:12,
						allResult:[a,b,c,d,e],
						bottomMsg:[]
					}
					for(let i=0;i<this.obj.length;i++){
						if(a[0]==this.obj[i].topicName){
							if(f>=this.obj[i].min&&f<=this.obj[i].max)
								result.bottomMsg.push(this.obj[i].tzms)
						}
						if(b[0]==this.obj[i].topicName){
							if(g>=this.obj[i].min&&g<=this.obj[i].max)
								result.bottomMsg.push(this.obj[i].tzms)
						}
					}
					console.log(result)
					let o = {
						aiTestTime:this.reportTime,
						aiUserId:this.userMsg.aiUserId,
						aiUserName:this.userMsg.aiUserName,
						aiScaleName:this.titleName.aiScaleName,
						reportContent:result,
						aiScaleId:12,
						msg:this.userMsg,
						aiDocId:USER_ID,
						startTime:sstorage.getItem('date'),	
					}
					console.log(o)
					$.ajax({
						type:'POST',
						url:config.url+'/report/op/Max',
						async:false,
						data:{
							value:JSON.stringify(o)
						},
						success:function(e){
							console.log(e)
						}
					})
				}
			}
		});

	
	var scales = sstorage.getItem("scaleRest");
	for (let i = 0; i < scales.items.length; i++) {
		if (scales.items[i].aiScaleId == 12) {
			scaleData.aiScaleId = scales.items[i].aiScaleId;
			scaleData.aiScaleName = scales.items[i].aiScaleName;
			let notice, overView;
			if (scales.items[i].aiScaleNotice)
				notice = scales.items[i].aiScaleNotice.split('&');
			if (scales.items[i].aiScaleOverview)
				overView = scales.items[i].aiScaleOverview.split('&');
			//scaleData.index.aiScaleNotice = (notice);
			scaleData.aiScaleOverview = (overView);
		}
	}
	
		console.log(scaleData, 'scaleData')
	</script>
</html>
