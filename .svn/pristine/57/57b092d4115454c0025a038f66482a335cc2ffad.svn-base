<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<script src="config/userConfig.js"></script>
		<!-- 背景动画 以及初始化样式 -->
		<link rel="stylesheet" type="text/css" href="../css/normalize.css" />
		<link rel="stylesheet" type="text/css" href="../css/demo.css">
		<link rel="stylesheet" type="text/css" href="../css/style.css">
		<!-- 页面样式 -->
		<link href="../css/doc_sdmt.css" rel="stylesheet" type="text/css" />
		<link href="../css/layoutStyle.css" rel="stylesheet" type="text/css" />
		<!-- 导入vue.js -->
		<script src="../js/vue.js"></script>
		<!-- <script src="../js/vue.min.js"></script> -->
		<!-- <script type="text/javascript" src="../js/vue.min.js"></script> -->
		<!-- 引入jQuery.js -->
		<script src="../js/jquery/jquery.min.js"></script>
		<!-- 外部工具类 -->
		<script src="utils/NumUtils.js"></script>
		<title>神经心理辅助诊疗系统</title>
	</head>
	<body>

		<!-- 背景 -->
		<div class="satic-area">
			<div class="dynamic-area1"></div>
			<div class="dynamic-area2"></div>
		</div>

		<div id="content" class=" vue">

			<div class="scale scale-Title">
				<!-- 临时使用 -->
				<!-- <div id="next-scale">
					<button type="button" onclick="stopTest()">完成</button>
					<button type="button" onclick="next_scale()">下一个</button>
				</div> -->

				<div id="title">
					<span>量表名称：{{titleName.aiScaleName}}</span>
					<div class="title-right">
						<span class="little-title-green cursorPointer" @click="refreshB()">刷新平板</span>
						<span id="f" class="little-title-red cursorPointer" v-if="isFinish" @click="next_scale()">进入下一个量表</span>
						<span class="little-title-red cursorPointer" v-if="isFinish" @click="printPdf()">打印报告</span>
					</div>
				</div>
				<div class="scale-left flex-layout-aligin scrollbar" style="width: 70%;justify-content: flex-start;overflow: overlay;" :style="{display:(status==0?'flex':'none')}">
					<div class="content-title">
						指导语
					</div>
					<div style="padding-bottom: 15px;padding-top: 20px;">
						<span class="little-title-content">
							&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{scaleMsg.aiQuestionGuid[status]}}
						</span>
					</div>
					<div class="exam flex-layout-aligin little-title-content">
						<div class="content-title" style="padding-bottom: 20px;height: auto;">
							键值表
						</div>
						<table border="1" cellpadding="10" cellspacing="0" style="text-align: center;border-color: darkgray;">
							<tr>
								<td class="exam-td" v-for="(it,index) in keyData" v-on:click="clickItems(index,0,'index')" v-bind:class="keyItems.index.indexOf(index)>-1?'blue-bgc':''">{{it[0]}}</td>
							</tr>
							<tr>
								<td class="exam-td" v-for="(it,index) in keyData" v-on:click="clickItems(index,1,'index')" v-bind:class="valueItems.index.indexOf(index)>-1?'blue-bgc':''">{{it[1]}}</td>
							</tr>
						</table>
						<div style="height: 30px;"></div>
						<div class="content-title" style="padding-bottom: 20px;height: auto;">
							例题
						</div>
						<table border="1" cellpadding="10" cellspacing="0" style="text-align: center;border-color: darkgray;">
							<tr>
								<td class="exam-td" v-for="(it,index) in testData" v-on:click="clickItems(index,0,'exam')" v-bind:class="keyItems.exam.indexOf(index)>-1?'blue-bgc':''">{{it.key}}</td>
							</tr>
							<tr>
								<td v-for="(it,index) in testData" v-on:click="clickItems(index,1,'exam')" v-bind:class="valueItems.exam.indexOf(index)>-1?'blue-bgc':''"
								 class="exam-td">
									{{it.value}}
								</td>
							</tr>
							<tr>
								<td v-for="(it,index) in testAnswer" class="exam-td">
											{{it}}
								</td>
							</tr>
						</table>
					</div>
					<div class="nextGroup little-title-green">
						<span class=" cursorPointer" v-on:click="startTest()">{{st.length == 0?'进入测试':'回到测试'}}</span>

					</div>
				</div>
				<div class="off scale-left flex-layout-aligin-none scrollbar" style="width: 70%;justify-content: flex-start;overflow: overlay;" :style="{display:(status==1?'flex':'none')}">
					<div class="content-title">
						指导语
					</div>
					<div style="padding-bottom: 15px;padding-top: 20px;">
						<span class="little-title-content">
							&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{scaleMsg.aiQuestionGuid[status]}}
						</span>
					</div>
					<div class="exam flex-layout-aligin little-title-content">
						<div class="content-title" style="padding-bottom: 20px;height: auto;">
							测试题目
						</div>
						<div style="height: 15px;"></div>
						<div class="little-title-darkgray" style="height: auto;padding-bottom: 10px;">
							{{(pos+1) > RandomTest.length ? '':'第'+getCN(pos+1)+'组'}}
						</div>
						<table border="1" cellpadding="10" cellspacing="0" style="text-align: center;border-color: darkgray;">
							<tr>
								<td class="exam-td" v-for="(it,index) in RandomTest[pos]" v-on:click="clickItems(index,0,pos)" v-bind:class="[it.answer==it.value?'':(it.answer==''?'':'red-bgc')]">{{it.key}}</td>
							</tr>
							<tr>
								<td v-for="(it,index) in RandomTest[pos]" v-on:click="clickItems(index,1,pos)" v-bind:class="[it.answer==it.value?'':(it.answer==''?'':'red-bgc')]"
								 class="exam-td">
									{{it.value}}
								</td>
							</tr>
							<tr>
								<td v-for="(it,index) in RandomTest[pos]" class="exam-td" v-bind:class="[it.answer==it.value?'':(it.answer==''?'':'red-bgc')]">
									{{it.answer == it.value ?it.answer:itemChange(pos,index,it.answer,it.value)}}
								</td>
							</tr>
						</table>
						<div style="height: 15px;"></div>
						<div class="little-title-darkgray" style="height: auto;padding-bottom: 10px;">
							{{(pos+2) > RandomTest.length ? '':'第'+getCN(pos+2)+'组'}}
						</div>
						<table border="1" cellpadding="10" cellspacing="0" style="text-align: center;border-color: darkgray;">
							<tr>
								<td class="exam-td" v-for="(it,index) in RandomTest[pos+1]" v-bind:class="[it.answer==it.value?'':(it.answer==''?'':'red-bgc')]">{{it.key}}</td>
							</tr>
							<tr>
								<td v-for="(it,index) in RandomTest[pos+1]" v-bind:class="[it.answer==it.value?'':(it.answer==''?'':'red-bgc')]" v-on:click="clickItems(index,1,pos+1)" class="exam-td">
									{{it.value}}
								</td>
							</tr>
							<tr>
								<td v-for="(it,index) in RandomTest[pos+1]" class="exam-td" v-bind:class="[it.answer==it.value?'':(it.answer==''?'':'red-bgc')]">
									{{it.answer}}
								</td>
							</tr>
						</table>
					</div>
					<div class="nextGroup little-title-green cursorPointer">
						<span v-on:click="toBack()" style="display: inline-block ;margin-right: 30px;"> {{pos == 0 ?'返回':'上一组'}}</span>
						<span v-on:click="toNext()">下一组</span>
					</div>
				</div>
				<div class="scale-right flex-layout-aligin scrollbar" style="width: 30%;overflow: overlay;">
					<div class="content-title ">
						{{status == 0?(st.length == 0?'量表说明':'评分'):'评分'}}
					</div>
					<div class="little-title-content scrollbar" :style="{display:(status==0?(st.length==0?'':'none'):'none')}">
						<div v-for="(it,index) in titleName.aiScaleOverview">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{it}}</div>
					</div>
					<div class="flex-layout-aligin-none" style="align-items: flex-start;line-height: 40px;padding-top: 20px;padding-bottom: 30px;"
					 :style="{display:(st.length==0?'':'flex')}">
						<span class="little-title">正确个数：{{T}}个</span>
						<span class="little-title">错误个数：{{F}}个</span>
						<span class="little-title">最终得分：{{T}}分</span>
					</div>
					<div class="flex-layout-j-start-none" :style="{display:(st.length==0?'':'flex')}">
						<span class="little-title-red">剩余时间：
							{{timerObj.minutes < 10 ?'0'+timerObj.minutes:timerObj.minutes}}:
							{{timerObj.seconds < 10 ? '0'+timerObj.seconds:timerObj.seconds}}:
							{{timerObj.p < 10 ? '0'+timerObj.p:timerObj.p}}
							<!--  -->
						</span>
					</div>

				</div>
			</div>
		</div>
	</body>

	<script src="../js/toJump.js"></script>
	<script src="utils/Storage.js"></script>
	<script src="config/urlConfig.js"></script>
	<script>
		//const USER_ID = window.location.search.split('?')[1].split(0, 1).join("");
		// let USER_ID = sstorage.getItem('logins');
		// if(USER_ID==null||USER_ID==undefined)
		// 	location.href = '../index.html'
		// USER_ID = USER_ID.id
		let reg_1 = /&/;
		let reg_2 = /\$/;
		let reg_3 = /split;/;
		let scaleData = {
			aiScaleId: '',
			aiScaleName: '',
			aiScaleOverview: [],
			aiScaleNotice: []
		};
		let scaleMsg = {
			aiQuestionAnswerDescribe: '',
			aiQuestionContent: [
				[
					[]
				],
				[
					[]
				]
			],
			aiQuestionGuid: '',
			aiQuestionId: '',
			aiQuestionNotice: '',
			aiQuestionOption: [
				[],
				[]
			],
			aiQuestionType: '',
			aiScaleId: '',
			aiScoreMethodName: '',
		};
		let keyData = new Map();
		let valueData = new Map();
		let testData = [];
		let RandomTest = [];
		/**
		 * 数据初始化
		 */
		$(document).ready(function() {
			$.ajax({
				url: config.url + '/scales/testMsg/' + 14,
				type: 'GET',
				success: function(e) {
					let m = e.object[0];
					console.log(m, 'm')
					let o = {};
					for (i in m) {
						o[i] = m[i];
						if (reg_1.test(m[i])) {
							o[i] = m[i].slice(0).split('&');
							if (reg_2.test(m[i])) {
								for (let n = 0; n < o[i].length; n++) {
									o[i][n] = o[i][n].slice(0).split('$');
									for (let j = 0; j < o[i][n].length; j++) {
										if (reg_3.test(m[i])) {
											o[i][n][j] = o[i][n][j].slice(0).split('split;')
										}
									}
								}
							}
						} else o[i] = m[i];

					}
					vue.scaleMsg = o;
					let ar = o.aiQuestionContent;
					for (let i = 0; i < ar[0].length; i++) {
						keyData.set(ar[0][i], ar[1][i]);
						valueData.set(ar[1][i], ar[0][i]);
					}
					for (let i = 0; i < ar[2].length; i++) {
						let obj = {};
						obj.key = ar[2][i];
						obj.value = keyData.get(ar[2][i]);
						testData.push(obj)
					}
					for (let i = 0; i < 8; i++) {
						RandomTest[i] = [];
						for (let j = 0; j < 15; j++) {
							let t = Math.round(Math.random() * 10) % 9 + 1;
							let o = {};
							o.key = valueData.get(t + '');
							o.value = t;
							o.answer = "";
							RandomTest[i].push(o);
						}
					}
					vue.RandomTest = RandomTest
					console.log(RandomTest, 'RandomTest')
					console.log(valueData, 'valueData')
					console.log(keyData, 'keyData')
					console.log(testData, 'testData')
					console.log(o, 'ooo')
					vue.J = true;
				},
				error: function() {
					console.log('连接服务器超时');
				}
			})
			
		});
		var scales = sstorage.getItem("scaleRest"); 
		let vue = new Vue({
			el: '.vue',
			data: {
				J:false,	//jQuery是否处理完毕
				titleName: scaleData, //量表基础信息
				keyData: keyData, //	键值对
				valueData: valueData, //值键对
				testData: testData, //例子
				RandomTest: RandomTest, //随机生成的题目
				status: 0, //测验运行状态;0默认，1测试进行中
				isFinish: 0, //定义是否测试完成，默认0
				pos: 0, //当前正在测试组号
				st: [], //判断是否进入过答题
				nPos: 0, //当前正在做的位置
				timer: null, //计时器
				falseSize: -1, //统计错误的个数
				resultGroup: {
					"0": [],
					"1": [],
					"2": [],
					"3": [],
					'4': [],
					"5": [],
					"6": [],
					"7": [],
					"8": []
				}, //用户回答的结果
				timerObj: {
					minutes: 1,
					seconds: 30,
					p: 0,
				},
				getCN: function(a) {
					return NumUtils.getCN(a)
				},
				keyItems: {
					index: [], //键值对表
					exam: [], //例子
					"0": [],
					"1": [],
					"2": [],
					"3": [],
					'4': [],
					"5": [],
					"6": [],
					"7": [],
					"8": []
				},
				valueItems: {
					index: [],
					exam: [],
					"0": [],
					"1": [],
					"2": [],
					"3": [],
					'4': [],
					"5": [],
					"6": [],
					"7": [],
					"8": []
				},
				scaleMsg: scaleMsg,
				pos: 0, //当前符号，默认0
				websocket: null,
				userMsg: sstorage.getItem('userMsg'),
				testAnswer:["","","","","","","","","","","","","","",""],
				isPrint:false,
				reportTime:null,
				F:0,	//正确个数
				T:0	,//错误个数
				obj:$.ajax({
					url:'../JSON/report_config.json',
					async:false
				}).responseJSON.scale_14.methods
			},
			created() {
				console.log(this.RandomTest)
				let that = this;
				this.userMsg = sstorage.getItem("userMsg");
				this.websocket = new WebSocket(config.wsURL + "/websocket/" + USER_ID);
				this.websocket.onmessage = function(e) {
					let data = JSON.parse(e.data)
					if(data.status==1){
						/**
						 * 处理即时数据
						 */
						if(data.dataOptions==1)
							that.RandomTest[data.data.x][data.data.y].answer = data.data.value;
						else if(data.dataOptions==0){
							that.testAnswer.splice(data.data.y,1,data.data.value);
						}
						that.T = 0;
						that.F = 0;
						for(let i=0;i<that.RandomTest.length;i++){
							for(let j=0;j<that.RandomTest[i].length;j++){
								if(that.RandomTest[i][j].value==that.RandomTest[i][j].answer){
									that.T++;
								}
								if(that.RandomTest[i][j].value!=that.RandomTest[i][j].answer&&
								that.RandomTest[i][j].answer!=""){
									that.F++;
								}
							}
						}
					}
				};
				this.websocket.onclose = function() {
					console.log('关闭')
				}
				window.onbeforeunload = function() {
					this.websocket.close();
				}
			},
			methods: {
				save(){
					let date = new Date().toLocaleString('chinese',{
						hour12:false
					});
					date = date.replace(/\//g,'-');
					if(this.reportTime==null)
					this.reportTime = date;
					let ans  = JSON.parse(JSON.stringify(this.RandomTest));
					let r = this.RandomTest[0].length;//正确个数
					for(let i=0;i<ans.length;i++){
						let o = {
							key:"题目",
							value:"参考答案",
							answer:"患者作答"
						}
						ans[i].unshift(o);
					}
					
					let a =['正确个数',this.T];
					let b = ['错误个数',this.F];
					let result = {
						id:14,
						allResult:[a,b],
						bottomMsg:[],
						answer:ans
					}
					for(let i=0;i<this.obj.length;i++){
						if(this.obj[i].min<=this.T&&this.obj[i].max>=this.T){
							result.bottomMsg.push(this.obj[i].tzms)
						}
					}
					let o = {
						aiTestTime:this.reportTime,
						aiUserId:this.userMsg.aiUserId,
						aiUserName:this.userMsg.aiUserName,
						aiScaleName:this.titleName.aiScaleName,
						reportContent:result,
						aiScaleId:14,
						msg:this.userMsg,
						aiDocId:USER_ID,
						startTime:sstorage.getItem('date'),	
					}
					$.ajax({
						type:'POST',
						url:config.url+'/report/op/Max',
						async:false,
						data:{
							value:JSON.stringify(o)
						},
						success:function(e){
							console.log(e)
						}
					})
				},
				printPdf(){
					console.log(this.RandomTest)
					if(this.isPrint == false){
						this.save();
						this.isPrint = true;
					}
					window.open('report/report.html')
					var scales = sstorage.getItem("scaleRest");
					let x = -1;
					for (let i = 0; i < scales.items.length; i++) {
						if (scales.items[i].aiScaleId == 14)
							x = i;
					}
					if (x + 1 == scales.items.length) {
						location.href = 'finish.html'
					}
				},
				next_scale(){
					this.save()
					console.log(scales)
					if (this.isFinish != 0) {
						let ind = -1;
						for (let i = 0; i < scales.items.length; i++) {
							if (scales.items[i].aiScaleId == 14)
								ind = i;
						}
						if (ind + 1 == scales.items.length) {
							window.location.href = 'finish.html'
						} else {
							toJump(scales.items[ind + 1].aiScaleId)
						}
					} else {
						alert('您还有未完成的内容');
					}
				},
				sendMsg(o) {
					console.log('发送消息', o)
					this.websocket.send(JSON.stringify(o));
				},
				refreshB() { //刷新平板
					let k = {};
					let k2 = {};
					for (let [key, value] of valueData)
						k2[key] = value;
					for (let [key, value] of keyData)
						k[key] = value
					let o = {
						target: this.userMsg.aiUserId,
						status: 0,
						from_who: USER_ID,
						data: {
							keyData: k,
							valueData: k2,
							testData: testData,
							RandomTest: RandomTest
						}
					}
					this.sendMsg(o);
				},
				itemChange: function(pos, index, answer, value) {
					if (answer == '')
						return
					let t = this.resultGroup[pos].indexOf(index);
					if (answer + '' == value + '') {
						if (t > -1)
							this.resultGroup[pos].splice(t, 1);
					} else {
						if (t < 0)
							this.resultGroup[pos].push(index)
					}
					return answer;
				},

				clickItems: function(index, w, s) {
					if (this.isFinish == 1) {
						return
					}

					if (w == 0) {
						let that = this;
						this.keyItems[s].push(index);
						setTimeout(function() {
							that.keyItems[s].shift()
						}, 1000);
					} else if (w == 1) {
						let that = this;
						this.valueItems[s].push(index);
						setTimeout(function() {
							that.valueItems[s].shift()
						}, 1000)
					}
				},
				startTest: function() {
					if (this.st.length != 0) {
						this.pos = this.nPos;
					} else {
						this.timer = new Timer();
						this.timer.setObject(this.timerObj);
						this.timer.setMinute(this.timerObj.minutes);
						this.timer.setSeconds(this.timerObj.seconds);
						this.timer.startCutDown()
					}
					if (this.st.length == 0)
						this.st.push(1);
					this.status = 1;

					let o = {
						target: this.userMsg.aiUserId,
						data: 1,
						status: 1,
						from_who: USER_ID
					};
					this.sendMsg(o)

				},
				toNext: function() {
					if (this.pos + 1 >= this.RandomTest.length)
						return
					this.pos++;
				},
				toBack: function() {
					if (this.status1 - 1 < 0)
						return;
					if (this.pos - 1 < 0) {
						this.status--;
					} else this.pos--;
				}
			},
			computed: {
				finishTimer: function() {
					return this.timerObj.minutes + this.timerObj.seconds + this.timerObj.p;
				}
			},
			watch: {
				resultGroup: {
					handler(a, b) {
						if (this.falseSize == -2)
							return
						this.falseSize = 0;
						for (i in this.resultGroup) {
							this.falseSize += this.resultGroup[i].length;
						}
					},
					deep: true,
					immediate: false
				},
				finishTimer: {
					handler(a, b) {
						if (a == 0)
							this.isFinish = 1;
					},
					immediate: false
				},
				J:{
					handler(a, b) {
						console.log('JOK',a);
						let that = this;
						let k = {};
						let k2 = {};
						for (let [key, value] of this.keyData)
							k[key] = value
						for (let [key, value] of this.valueData)
							k2[key] = value;
						let o = {
							target: this.userMsg.aiUserId,
							status: 0,
							from_who: USER_ID,
							data: {
								keyData: k,
								valueData: k2,
								testData: testData,
								RandomTest: RandomTest
							}
						}
						try{
							that.sendMsg(o)
						}catch(e){
							//TODO handle the exception
							this.websocket.addEventListener('open', function(event) {
								that.sendMsg(o)
							});
						}
						
					},
					immediate: false
				}
			}
		});

		//获取量表基本信息(首页)
		
		console.log(scales, 'scales')
		for (let i = 0; i < scales.items.length; i++) {
			if (scales.items[i].aiScaleId == 14) {
				scaleData.aiScaleId = scales.items[i].aiScaleId;
				scaleData.aiScaleName = scales.items[i].aiScaleName;
				let notice, overView;
				if (scales.items[i].aiScaleNotice)
					notice = scales.items[i].aiScaleNotice.split('&');
				if (scales.items[i].aiScaleOverview)
					overView = scales.items[i].aiScaleOverview.split('&');
				//scaleData.index.aiScaleNotice = (notice);
				scaleData.aiScaleOverview = (overView);
			}
		}
		
		let x = -1;
		for (let i = 0; i < scales.items.length; i++) {
			if (scales.items[i].aiScaleId == 14)
				x = i;
		}
		if (x + 1 == scales.items.length) {
			document.getElementById('f').style.display = 'none'
		}
		console.log(scaleData, 'scaleData')
	</script>
</html>
