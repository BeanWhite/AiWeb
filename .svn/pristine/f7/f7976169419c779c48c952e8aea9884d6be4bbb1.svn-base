<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<!-- 背景动画 以及初始化样式 -->
		<link rel="stylesheet" type="text/css" href="../css/normalize.css" />
		<link rel="stylesheet" type="text/css" href="../css/demo.css">
		<link rel="stylesheet" type="text/css" href="../css/style.css">
		<!-- 页面样式 -->
		<link href="../css/doc_cwt.css" rel="stylesheet" type="text/css" />
		<link href="../css/layoutStyle.css" rel="stylesheet" type="text/css" />
		<!-- 导入vue.js -->
		<!-- <script src="../js/vue.js"></script> -->
		<script src="../js/vue.min.js"></script>
		<!-- <script type="text/javascript" src="../js/vue.min.js"></script> -->
		<!-- 引入jQuery.js -->
		<script src="../js/jquery/jquery.min.js"></script>
		<title>神经心理辅助诊疗系统</title>
	</head>
	<body>
		<!-- 背景 -->
		<div class="satic-area">
			<div class="dynamic-area1"></div>
			<div class="dynamic-area2"></div>
		</div>

		<div id="content" class=" vue">

			<div class="scale scale-Title">
				<!-- 临时使用 -->
				<!-- <div id="next-scale">
					<button type="button" onclick="stopTest()">完成</button>
					<button type="button" onclick="next_scale()">下一个</button>
				</div> -->

				<div id="title">
					<span>量表名称：{{titleName.aiScaleName}}</span>
					<div class="title-right">
						<span class="little-title-green cursorPointer" @click="toSt()">刷新平板</span>
						<span class="little-title-red cursorPointer" @click="nextScale()">进入下一个量表</span>
						<span v-if="isFinish==1" class="little-title-red cursorPointer" @click="printPDF()">打印报告</span>
					</div>
				</div>
				<div class="scale-left flex-layout-aligin" style="width: 70%;justify-content: flex-start;align-items: flex-start;">
					<div class="content-title" style="height: auto;">
						指导语
					</div>
					<div class="g-content">
						<span class="little-title-content">
							&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{scaleMsg.aiQuestionGuid[status]}}
						</span>
					</div>
					<div class="little-title cardTitle">
						{{cardTitle[status]}}
					</div>
					<table border="1" cellpadding="5" class="little-title-darkgray">
						<tr class="table-line" v-for="(it,index) in RandomTest">
							<td v-on:click="itemsClick(index,index_2)" class="table-line-item" v-for="(i,index_2) in it" :style="{color:(status==2?i.colorGroup[setColor[index][index_2]]:'')}">
								{{
										status == 0 ?i.value:(status == 1?'':i.value)
								}}
								<!-- {{Math.round(Math.random()*10)%4+1}} -->
								<div class="circle" :style="{display:(status==1?'flex':'none'),backgroundColor:i.color}"></div>
								<img src="../svg/false.svg" class="item-icon" :style="{display:
								 (status>=0?(trueItems[status][index].indexOf(index_2)>-1?'flex':''):'')
								 }">
							</td>
						</tr>
					</table>
					<div class="cGroup little-title-green" v-if="isStart==false">
						<span v-on:click="back()" class="cursorPointer" style="display: inline-block;margin-right: 30px;">{{status == 0 ? '':'上一组'}}</span>
						<span v-on:click="next()" class="cursorPointer">{{status == 2 ?(finishStatus==1?'':'查看得分'):'下一组'}}</span>
					</div>
					<!-- 				als==1?(finishStatus==0?'flex':''):(status>0?(finishStatus==0?'flex':''):'none')
					status>0?(finishStatus==0?'flex':''):'none' -->
					<div class="st-box" v-if="isStart">
						<div class="st-button little-title-white" @click="toSt()">
							开始
						</div>
					</div>
					<div v-if="isStart==false" class="myResult" :style="{display:(status>= 0?(finishStatus==0?'flex':''):'none')}">
						<span class="little-title-red">已用时间：{{timerData}}</span>
						<div class="">

							<span class="cursorPointer" v-on:click="timerListener(0)" v-bind:class="[timerStatus[status]==0?'little-title-green':'',timerStatus[status]==1?'little-title-red':'',timerStatus[status]>=2?'little-title-green':'']">
								{{timerContent[timerStatus[status]]}}
							</span>
							<span v-on:click="timerListener(1)" style="margin-left: 15px;" class="cursorPointer little-title-green" :style="{visibility:(timerStatus[status]==3?'hidden':'')}">
								{{timerStatus[status] > 0 ? '停止':'&nbsp;'}}
							</span>
						</div>

					</div>
					<div class="myResult" :style="{display:(status>=0?(finishStatus==1?'flex':''):'none')}">
						<span class="little-title-red">SIE&nbsp;耗时数：{{SIETimer}}秒</span>
						<span class="little-title-red">SIE&nbsp;标准数：{{SIENum}}个</span>
					</div>
				</div>
				<div class="scale-right flex-layout-aligin" style="width: 30%;">
					<div class="content-title">
						量表说明
					</div>
					<div class="little-title-content" style="width: 100%;height: 100%;overflow-y: overlay;">
						<div v-for="(it,index) in titleName.aiScaleOverview">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{it}}</div>
					</div>
				</div>
			</div>
		</div>
	</body>

	<script src="../js/toJump.js"></script>
	<script src="utils/Storage.js"></script>
	<script src="config/urlConfig.js"></script>
	<script>
		//const USER_ID = window.location.search.split('?')[1].split(0, 1).join("");
		let USER_ID = sstorage.getItem('logins');
		if(USER_ID==null||USER_ID==undefined)
			location.href = '../index.html'
		USER_ID = USER_ID.id
		let reg_1 = /&/;
		let reg_2 = /\$/;
		let reg_3 = /split;/;
		let scaleData = {
			aiScaleId: '',
			aiScaleName: '',
			aiScaleOverview: [],
			aiScaleNotice: []
		};
		let scaleMsg = {
			aiQuestionAnswerDescribe: '',
			aiQuestionContent: [
				[
					[]
				],
				[
					[]
				]
			],
			aiQuestionGuid: '',
			aiQuestionId: '',
			aiQuestionNotice: '',
			aiQuestionOption: [
				[],
				[]
			],
			aiQuestionType: '',
			aiScaleId: '',
			aiScoreMethodName: '',
		};
		let colorObj = {
			1: '绿',
			2: '红',
			3: '黄',
			4: '蓝'
		};
		let colorValueObj = {
			1: 'green',
			2: 'red',
			3: '#ffbc00',
			4: 'blue'
		};
		let setColor = []
		RandomTest = [];

		/**
		 * 数据初始化
		 */
		for (let i = 0; i < 5; i++) {
			let arr = [];
			setColor[i] = [];
			for (let j = 0; j < 10; j++) {

				setColor[i].push(Math.round(Math.random() * 10) % 3)
				let o = {};
				let key = Math.round(Math.random() * 10) % 4 + 1;
				o.key = key;
				o.value = colorObj[key];
				o.color = colorValueObj[key]; {
					let arr = [];
					for (let t = 1; t < 5; t++) {
						if (key != t) {
							arr.push(colorValueObj[t]);
						}
					}
					o.colorGroup = arr;
				}
				arr.push(o)
			}
			RandomTest.push(arr);
		}
		console.log(setColor, 'setColor')
		console.log(RandomTest, 'RandomTest');
		let vue = new Vue({
			el: '.vue',
			data: {
				isPrint: false, //是否点击过打印
				reportTime: null,
				report_config: $.ajax({ //报告结果配置信息
					url: '../JSON/report_config.json',
					async: false
				}).responseJSON.scale_15,
				RESULT_DATA: { //需要打印的结果信息
					id: 15,
					allResult: [],
					bottomMsg: []
				},
				als: 0, //答题状态
				RandomTest: RandomTest,
				titleName: scaleData,
				status: 0, //0,1,2三个状态分别对应三张卡片
				cardTitle: ['卡片A', '卡片B', '卡片C'],
				timerContent: ['开始', '暂停', '继续', '重置'],
				scaleMsg: scaleMsg,
				pos: 0, //当前符号，默认0
				setColor: setColor,
				timer: null,
				timerObj: [{
					minutes: 0,
					seconds: 0,
					p: 0
				}, {
					minutes: 0,
					seconds: 0,
					p: 0
				}, {
					minutes: 0,
					seconds: 0,
					p: 0
				}],
				trueItems: [
					[
						[],
						[],
						[],
						[],
						[]
					],
					[
						[],
						[],
						[],
						[],
						[]
					],
					[
						[],
						[],
						[],
						[],
						[]
					],
				],
				finishCard: [], //完成的卡片
				timerStatus: [0, 0, 0], //计时器状态
				finishStatus: 0, //量表是否完成，默认0
				isFinish: 0,
				J: false, //jQuery是否加载完
				isStart: true, //开始按钮是否待点击
				websocket: null,
				userMsg: null,
				saveStatus: 0 //	数据是否为待保存状态
			},
			watch: {
				J: {
					handler(newa, oldb) {
						console.log(this.J, 'JOk')
					},
					deep: true,
					immediate: false
				},
				isFinish() {

				}

			},
			created() {
				let that = this;
				this.userMsg = sstorage.getItem("userMsg");
				this.websocket = new WebSocket(config.wsURL + "/websocket/" + USER_ID);

				this.websocket.onmessage = function(e) {

				};

				this.websocket.onclose = function(e) {
					console.log('连接关闭')
				}
				window.onbeforeunload = function() {
					that.websocket.close();
				}
			},

			computed: {

				timerData: function() {
					// if (this.status == 0)
					// 	return

					let m = this.timerObj[this.status].minutes;
					let s = this.timerObj[this.status].seconds;
					let p = this.timerObj[this.status].p;
					if (m < 10)
						m = '0' + m;
					if (s < 10)
						s = '0' + s;
					if (p < 10)
						p = '0' + p;
					return m + ':' + s + ":" + p;
				},
				SIETimer: function() {
					let a = this.timerObj[2].seconds + this.timerObj[2].minutes * 60;
					let b = this.timerObj[1].seconds + this.timerObj[1].minutes * 60;
					let c = a - b;
					return c;
				},
				SIENum: function() {
					let c = 0;
					let b = 0;
					for (let i = 0; i < this.trueItems[2].length; i++) {
						c += this.trueItems[2][i].length;
					}
					for (let i = 0; i < this.trueItems[1].length; i++) {
						b += this.trueItems[1][i].length;
					}
					return c - b;
				}
			},
			methods: {
				printPDF() {
					if (this.isPrint == false) {
						let date = new Date().toLocaleString('chinese', {
							hour12: false
						});
						date = date.replace(/\//g, '-')
						if(this.reportTime == null)
							this.reportTime = date;
						sstorage.setItem('&15', this.RESULT_DATA);

						let that = this;
						let o = {
							aiTestTime:that.reportTime,
							aiUserId:that.userMsg.aiUserId,
							aiUserName:that.userMsg.aiUserName,
							aiScaleName:that.titleName.aiScaleName,
							reportContent:that.RESULT_DATA,
							aiScaleId:15,
							aiDocId:USER_ID,
							msg:that.userMsg,
							startTime:sstorage.getItem('date')
						}
						$.ajax({
							url:config.url+'/report/op/Max',
							type:'POST',
							async:false,
							data:{
								value:JSON.stringify(o)
							},
							success:function(e){
								
							}
						})
						// $.ajax({
						// 	url: config.url + '/report/op/' + that.reportTime + '/' + that.userMsg.aiUserId + '/' + that.userMsg.aiUserName + '/' +
						// 		that.titleName.aiScaleName + '/' + JSON.stringify(that.RESULT_DATA)+'/'+15+'/'+JSON.stringify(that.userMsg)+'/'+USER_ID,
						// 	type: 'POST',
						// 	success: function(e) {
						// 		console.log(e)
								
						// 	},
						// 	error: function() {
						// 	}
						// })
					}
					this.isPrint = true;
					window.open("report/report.html")
				},
				sendMsg(o) {
					console.log('消息发送', o)
					this.websocket.send(JSON.stringify(o));
				},
				nextScale() {
					if (this.isPrint == false) {
						let date = new Date().toLocaleString('chinese', {
							hour12: false
						});
						date = date.replace(/\//g, '-')
						if(this.reportTime == null)
							this.reportTime = date;
						sstorage.setItem('&15', this.RESULT_DATA);
						
						
						let that = this;
						let o = {
							aiTestTime:that.reportTime,
							aiUserId:that.userMsg.aiUserId,
							aiUserName:that.userMsg.aiUserName,
							aiScaleName:that.titleName.aiScaleName,
							reportContent:that.RESULT_DATA,
							aiScaleId:15,
							aiDocId:USER_ID,
							msg:that.userMsg,
							startTime:sstorage.getItem('date')
						}
						$.ajax({
							url:config.url+'/report/op/Max',
							type:'POST',
							async:false,
							data:{
								value:JSON.stringify(o)
							},
							success:function(e){
								
							}
						})
					}
					this.isPrint = true;
					if (this.isFinish == 1) {
						let o = {
							target: vue.userMsg.aiUserId,
							status: 3,
							from_who: USER_ID
						}
						this.sendMsg(o);
						let ind = -1;
						for (let i = 0; i < scales.items.length; i++) {
							if (scales.items[i].aiScaleId == 15)
								ind = i;
						}
						if (ind + 1 == scales.items.length) {
							window.location.href = 'finish.html'
						} else {
							toJump(scales.items[ind + 1].aiScaleId)
						}
					} else return
				},
				toSt: function() {
					/**
					 * 点击开始按钮
					 */
					this.isStart = false;
					let that = this;
					let o = {
						target: this.userMsg.aiUserId,
						data: {
							setColor: that.setColor,
							RandomTest: that.RandomTest,
							guid: that.scaleMsg.aiQuestionGuid[that.status]
						},
						status: 0,
						from_who: USER_ID,
					}
					this.sendMsg(o)
				},
				back: function() {
					if (this.status - 1 < 0)
						return
					this.status--;
				},
				next: function() {
					if (this.status >= 0) {
						if (this.finishCard.indexOf(this.status) < 0) {
							return;
						}

					}
					if (this.status + 1 > 2) {
						this.finishStatus = 1;
						return
					}
					if (this.pos == this.status) {
						this.pos++;
						let o = {
							target: this.userMsg.aiUserId,
							data: this.scaleMsg.aiQuestionGuid[this.status],
							ot: this.status,
							status: 6,
							from_who: USER_ID,
						}
						this.sendMsg(o);
					}
					this.status++;

					console.log(this.status)

				},
				itemsClick: function(index, index_2) {

					let i = this.trueItems[this.status][index].indexOf(index_2)
					if (i > -1) {
						this.trueItems[this.status][index].splice(i, 1);
					} else {
						this.trueItems[this.status][index].push(index_2)
					}

					this.keepData()
				},
				timerListener: function(a, b) {
					let w = this.timerStatus[this.status];
					if (a == 0) {
						if (w == 2) {
							//计时继续
							this.timerStatus.splice(this.status, 1, 1);
							this.timer.goOn()
						} else if (w == 3) {
							//重新开始计时
							if (this.isFinish == 1)
								this.isFinish = 0;
							this.timerStatus.splice(this.status, 1, 0)
							let o = {
								minutes: 0,
								seconds: 0,
								p: 0
							};
							this.timerObj.splice(this.status, 1, o);
						} else {
							this.timerStatus.splice(this.status, 1, this.timerStatus[this.status] + 1);
							if (w == 0) {
								//开始计时
								if (this.als == 0)
									this.als = 1;
								this.timer = new Timer(this.timerObj[this.status]);
								this.timer.setMinute(0);
								this.timer.setSeconds(0);
								this.timer.setP(0);
								this.timer.startTimer()
							} else if (w == 1) {
								//暂停计时
								this.timer.pause()
							}
						}

					} else if (a == 1) {
						// if (this.timerStatus[this.status] == 3)
						// 	return
						this.timer.stop();
						this.timer = null;
						if (this.finishCard.indexOf(this.status) < 0) {
							this.finishCard.push(this.status);
						}
						this.timerStatus.splice(this.status, 1, 3)
						if (this.status == 2) {
							this.isFinish = 1;
							this.keepData()
							console.log('保存数据')

						}
					}

				},
				keepData: function() {
					let na = 0; //C卡片数量
					let nb = 0; //B卡片数量
					let n = 0; //A卡片数量
					for (let i = 0; i < this.trueItems[0].length; i++) {
						na += this.trueItems[0][i].length;
					}
					for (let i = 0; i < this.trueItems[1].length; i++) {
						nb += this.trueItems[1][i].length;
					}

					for (let i = 0; i < this.trueItems[2].length; i++) {
						n += this.trueItems[2][i].length;
					}
					let ar1 = ["卡片A", n, this.getTime(0)];
					let ar2 = ["卡片B", na, this.getTime(1)];
					let ar3 = ["卡片C", nb, this.getTime(2)];
					let ar4 = ["烦扰效应SIE", this.SIENum, this.SIETimer];

					this.RESULT_DATA.allResult[0] = ar1;
					this.RESULT_DATA.allResult[1] = ar2;
					this.RESULT_DATA.allResult[2] = ar3;
					this.RESULT_DATA.allResult[3] = ar4;
					for (let i = 0; i < this.report_config.methods.length; i++) {
						if (n + na + nb >= this.report_config.methods[i].min && n + na + nb <= this.report_config.methods[i].max) {
							this.RESULT_DATA.bottomMsg[0] = this.report_config.methods[i].tzms;
							console.log(this.report_config.methods[i].tzms)
						}
					}
					sstorage.setItem("&15", this.RESULT_DATA);
					console.log('保存报告数据', this.RESULT_DATA)
				},
				getTime(ind) {

					let m = this.timerObj[ind].minutes * 60;
					let s = this.timerObj[ind].seconds;
					let p = 0;
					if (p > 50)
						p = 1;
					return m + s + p;
				}
			}
		});
		//获取量表基本信息(首页)
		var scales = sstorage.getItem("scaleRest");
		console.log(scales, 'scales')
		if (scales)
			for (let i = 0; i < scales.items.length; i++) {
				if (scales.items[i].aiScaleId == 15) {
					scaleData.aiScaleId = scales.items[i].aiScaleId;
					scaleData.aiScaleName = scales.items[i].aiScaleName;
					let notice, overView;
					if (scales.items[i].aiScaleNotice)
						notice = scales.items[i].aiScaleNotice.split('&');
					if (scales.items[i].aiScaleOverview)
						overView = scales.items[i].aiScaleOverview.split('&');
					//scaleData.index.aiScaleNotice = (notice);
					scaleData.aiScaleOverview = (overView);
				}
			}


		console.log(scaleData, 'scaleData')
		/**
		 * 数据初始化
		 */
		$(document).ready(function() {
			$.ajax({
				url: config.url + '/scales/testMsg/' + 15,
				type: 'GET',
				success: function(e) {
					let m = e.object[0];
					console.log(m, 'm')
					let o = {};
					for (i in m) {
						o[i] = m[i];
						if (reg_1.test(m[i])) {
							o[i] = m[i].slice(0).split('&');
							if (reg_2.test(m[i])) {
								for (let n = 0; n < o[i].length; n++) {
									o[i][n] = o[i][n].slice(0).split('$');
									for (let j = 0; j < o[i][n].length; j++) {
										if (reg_3.test(m[i])) {
											o[i][n][j] = o[i][n][j].slice(0).split('split;')
										}
									}
								}
							}
						} else o[i] = m[i];

					}
					vue.scaleMsg = o;
					console.log(o, 'ooo')
				},
				error: function() {
					console.log('连接服务器超时');
				}
			})
		});
	</script>
</html>
