<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>神经心理辅助诊疗系统</title>
		<script src="config/userConfig.js"></script>
		<!-- 背景动画 以及初始化样式 -->
		<link rel="stylesheet" type="text/css" href="../css/normalize.css" />
		<link rel="stylesheet" type="text/css" href="../css/demo.css">
		<link rel="stylesheet" type="text/css" href="../css/style.css">
		<!-- 页面样式 -->
		<link rel="stylesheet" type="text/css" href="../css/doc_ligature.css" />
		<script type="text/javascript" src="./config/urlConfig.js"></script>
		<!-- 导入vue.js -->
		<script type="text/javascript" src="../js/vue.js"></script>
		<!-- 引入jQuery.js -->
		<script src="../js/jquery/jquery.min.js"></script>
	</head>
	<body>
		<!-- 背景 -->
		<div class="satic-area">
			<div class="dynamic-area1"></div>
			<div class="dynamic-area2"></div>
		</div>
		<div id="content">
			<div class="scale">

				<div class="cdt-menu">
					<span class="cdt">A部分练习</span>
					<span class="cdt">A部分测试</span>
					<span class="cdt">B部分练习</span>
					<span class="cdt">B部分测试</span>
				</div>

				<div class="scale-right" id="scale-right">
					<div id="scale-name">量表名称：连线测验（{{name}}）</div>
					<div class="scale-right-content content1">
						<div class="content-title">使用方法</div>
						<div class="question-content">
							<ul id="use-method">
								<li v-for="item in methods">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{item.value}}</li>
							</ul>
						</div>
					</div>

					<div class="scale-right-content  content2">
						<div class="content-title">患者绘图结果展示</div>
						<!-- 动态展示用户画板 -->
						<div class="re-img">
							<img id="re-img" src="../img/space.png"/>
						</div>

					</div>
				</div>
				<div class="scale-left">

					<div class="scale-check  content1" onclick="checkScore()">查看患者绘图并打分</div>
					<div class="scale-check  content2" style="position: relative;width: auto;text-align: right;justify-content: space-evenly;align-items: center;">
						<span class="back" onclick="backPage()">返回</span>
						<span onclick="createReport()" style="margin-right: 40px;margin-left: 40px;">生成报告</span>
						<span id="f" onclick="next_scale()">下一个测验</span>
					</div>



					<div class="scale-content  content1 scrollbar">
						<div class="content-title">量表说明</div>
						<ul id="scale-list">
							<li v-for="item in scale_explain">
								<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{item.value}}</p>
							</li>
						</ul>
					</div>


					<div class="scale-content  content2">
						<div class="content-title">
							注意事项
						</div>
						<ul class="options">
							<li v-for="item in notice">
								<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{item.value}}</p>
							</li>
						</ul>
						<div class="content-title">
							提示选项
						</div>
						<div class="option-content" style="	width: 100%;padding-top: 15px;">
							<table border="0" cellspacing="3" cellpadding="10" style="width: 100%;text-align: center;">
								<tr>
									<td class="option-child"><span onclick="sendValue(this)">1</span></td>
									<td class="option-child"><span onclick="sendValue(this)">2</span></td>
									<td class="option-child"><span onclick="sendValue(this)">3</span></td>
									<td class="option-child"><span onclick="sendValue(this)">4</span></td>
								</tr>
								<tr>
									<td class="option-child"><span onclick="sendValue(this)">A</span></td>
									<td class="option-child"><span onclick="sendValue(this)">B</span></td>
									<td class="option-child"><span onclick="sendValue(this)">C</span></td>
									<td class="option-child"><span onclick="sendValue(this)">D</span></td>
								</tr>
							</table>
						</div>
						<div class="test-data" id="bc">
							<span id="do-time">完成时长:{{time}}</span>
							<span id="do-score">
								连接错误数:<input maxlength="2" type="text" style="border: solid 1px darkgray;color:  rgb(16, 112, 193);width: 32px;border-radius: 5px;" v-model="error_con" />
							</span>

							<div class="saveButton" onclick="sda(this)">
								保存
							</div>


							<!-- <span id="do-score">
								忽略错误数:{{ignore_con}}
							</span> -->
						</div>

					</div>

				</div>
			</div>
			<canvas id="" width="" height="" style="display: none;"></canvas>
		</div>
	</body>
	<script src="utils/Storage.js"></script>
	<script src="../js/toJump.js"></script>
	<script>
		function sda(a) {
			stopTest();
			a.style.backgroundColor = "#cccccc";
			setTimeout(function() {
				a.style.backgroundColor = "white"
			}, 300)
		}
	</script>
	<script>
		// let USER_ID = sstorage.getItem('logins');
		// if(USER_ID==null||USER_ID==undefined)
		// 	location.href = '../index.html'
		// USER_ID = USER_ID.id
		console.log(USER_ID)
		let userMsg = sstorage.getItem('userMsg');
		let _targetID = userMsg.aiUserId;
		let isPrint = false;
		let reportTime = null;

		let RESULT_DATA = { //	项目结论存储的信息
			allResult: [],
			useTime: "",
			serviceImg: [],
			bottomMsg: []
		};
		let theEnd = JSON.parse($.ajax({
			url: '../JSON/report_config.json',
			async: false
		}).responseText).scale_20;

		$(document).ready(function() {
			$.ajax({
				type: 'GET',
				url: config.url + '/scales/testMsg/' + 20,
				success: function(e) {
					console.log(e.object)
					all_test = e.object.slice(0, e.object.length);
					//初始化注意事项
					let str = "";
					for (let i = 0; i < all_test.length; i++) {
						if (all_test[i].aiScoreMethodName == 'A部分练习') {
							for (let j = 0; j < all_test[i].aiQuestionNotice.length; j++) {
								if (all_test[i].aiQuestionNotice[j] == '&') {
									let obj = {};
									obj.value = str;
									notice.push(obj);
									str = "";
								} else {
									str += all_test[i].aiQuestionNotice[j];
								}
							}
							break;
						}
					}
					notice.push({
						value: str
					});
					str = "";
				},
				error: function() {

				}
			})


			let scale;
			//检测内容是否发送过来
			try {
				s = sstorage.getItem("scaleRest");
				for (let i = 0; i < s.items.length; i++)
					if (s.items[i].aiScaleId == 20) {
						scale = s.items[i];
						break
					}

			} catch (e) {
				console.log('出错了')
				return
			}

			let p = [];
			let f = "";
			let f2 = "";
			let p2 = [];
			//处理量表描述 and 量表用法
			try {
				//描述
				for (let i = 0; i < scale.aiScaleOverview.length; i++) {
					if (scale.aiScaleOverview[i] == '&') {
						p.push(f);
						f = "";
					} else {
						f += scale.aiScaleOverview[i];
					}

				}
				//用法
				for (let i = 0; i < scale.aiScaleNotice.length; i++) {
					if (scale.aiScaleNotice[i] == '&') {
						p2.push(f2);
						f2 = "";
					} else {
						f2 += scale.aiScaleNotice[i];
					}
				}
			} catch (e) {
				console.log('出错')
				//TODO handle the exception
			}
			p.push(f);
			p2.push(f2)
			//添加量表说明
			for (let j = 0; j < p.length; j++) {
				let obj = {};
				obj.value = p[j];
				scale_explain.push(obj);
			}
			for (let j = 0; j < p2.length; j++) {
				let obj = {};
				obj.value = p2[j];
				methods.push(obj) //methods.push(obj);
			}

			//顶部按钮点击事件
			for (let i = 0; i < cdt.length; i++)
				cdt[i].onclick = function() {
					if (i > Pos + 1)
						alert('请先完成前面的测试')
					else {
						if (i > Pos)
							Pos++;
						if (Pos > 3)
							Pos = 3;
						this.style.backgroundColor = "darkgray";
						notice.splice(0, notice.length);
						//加载注意事项和指导语
						for (let k = 0; k < all_test.length; k++)
							if (this.innerText == all_test[k].aiScoreMethodName) {
								let arr = all_test[k].aiQuestionNotice.split('&');
								arr.forEach(function(e) {
									let obj = {};
									obj.value = e;
									notice.push(obj);
								})
								scale_name.name = this.innerText;
								break;
							}

						let obj = {};
						obj.target = _targetID;
						obj.from_who = USER_ID;
						obj.status = -1,
							obj.ot = 0;
						obj.data = i + 1;
						sendMSG(obj);
					}


				}

			if (!scale)
				alert("系统错误");
		})

		//从本地读取的量表信息
		let s;

		var cdt = document.getElementsByClassName('cdt');

		//记录当前测试位置
		var Pos = -1;

		//所有题目信息
		var all_test = [];

		//量表说明数据包
		var scale_explain = [];

		//评分方式数据包
		var methods = [];

		//指导语数据包
		var guids = [];

		//注意事项数据包
		var notice = [];

		//评分方式控制

		new Vue({
			el: '.options',
			data: {
				notice: notice
			}
		});
		//时间控制
		var do_time = new Vue({
			el: '#bc',
			data: {
				time: 0, //完成时间，计时器
				error_con: 0, //连接错误数
				ignore_con: 0 //忽略错误数
			}
		});

		//量表说明控制
		var scale_list = new Vue({
			el: '#scale-list',
			data: {
				scale_explain
			}
		})

		//
		var scale_name = new Vue({
			el: '#scale-right',
			data: {
				name: 'A部分练习',
				methods
			}
		});



		/**
		 * 完成该部分测验，保存数据
		 */
		function stopTest() {

			/**
			 * 获取患者画的图片
			 */
			let img = document.getElementById('re-img');
			// let canvas = document.createElement("canvas");
			// canvas.width = img.width;
			// canvas.height = img.height;
			// let ctx = canvas.getContext("2d");
			// ctx.drawImage(img, 0, 0, img.width, img.height);

			let date = new Date().toLocaleString('chinese', {
				hour12: false
			});

			let EndTime = new Date(); //完成时的时间
			// let obj = {
			// 	name: scale_name.name, //题目名称
			// 	time: do_time.time, //完成时间
			// 	score: do_time.error_con, //最终得分
			// 	img: canvas.toDataURL('image/png'), //结果图片url
			// 	doc: "", //施测人（不填）
			// 	date: date, //完成量表日期()
			// 	des: "" //最终测试结果
			// }



			let allResult_item = [];
			let serviceImg = [];
			let bottomMsg = ""; //最后结论
			/**
			 * 后期需要将正确图加上
			 */

			let imgObj = {
				id: 20,
				title: scale_name.name,
				localURL: "",
				proURL: "",
				base64: img.src
			}

			allResult_item[0] = scale_name.name; //项目名
			allResult_item[1] = do_time.time; //消耗时长
			allResult_item[2] = do_time.error_con;

			if (RESULT_DATA.allResult.length == 0) { //如果还没有操作
				RESULT_DATA.allResult.push(allResult_item);
				RESULT_DATA.bottomMsg.push(bottomMsg);
				RESULT_DATA.serviceImg.push(imgObj);
			} else {
				let ind = -1;
				for (let i = 0; i < RESULT_DATA.allResult.length; i++) {
					ind = RESULT_DATA.allResult[i].indexOf(scale_name.name)
					if (ind > -1) {
						RESULT_DATA.allResult[i] = allResult_item;
						RESULT_DATA.bottomMsg[i] = bottomMsg;
						RESULT_DATA.serviceImg[i] = imgObj;
						break;
					}
				}
				if (ind == -1) {
					RESULT_DATA.allResult.push(allResult_item);
					RESULT_DATA.bottomMsg.push(bottomMsg);
					RESULT_DATA.serviceImg.push(imgObj);
				}
			}

			sstorage.setItem('&20', RESULT_DATA);
			console.log(RESULT_DATA)
		}

		function next_scale() {

			if (isPrint == false) {
				let date = new Date().toLocaleString('chinese', {
					hour12: false
				});
				date = date.replace(/\//g, '-')
				if (reportTime == null)
					reportTime = date;
				sstorage.setItem('&20', RESULT_DATA);
				let o = {
					aiTestTime: reportTime,
					aiUserId: userMsg.aiUserId,
					aiUserName: userMsg.aiUserName,
					aiScaleName: '连线测验',
					reportContent: JSON.stringify(RESULT_DATA),
					aiScaleId: 20,
					msg: userMsg,
					aiDocId: USER_ID,
					startTime: sstorage.getItem('date')
				}
				$.ajax({
					url: config.url + '/report/op/Max',
					type: 'POST',
					data: {
						value: JSON.stringify(o)
					},
					async: false,
					success: function(e) {
						console.log(e)
					}
				})
			}
			isPrint = true;
			if (Pos >= 3) {
				let ind;
				console.log(s);
				for (let i = 0; i < s.items.length; i++) {
					if (s.items[i].aiScaleId == 20)
						ind = i;
				}

				let o = {
					target: sstorage.getItem('userMsg').aiUserId,
					status: 3,
					from_who: USER_ID
				}
				sendMSG(o)
				if (ind + 1 == s.items.length) {
					window.location.href = 'finish.html'
				} else {
					toJump(s.items[ind + 1].aiScaleId)
				}

			} else {
				alert('您还有未完成的内容');
			}
		}


		/**
		 * 为选项列表添加事件,在画板上高亮显示圆
		 */
		function sendValue(t) {
			t.style.backgroundColor = " rgb(16, 112, 193)";
			let targetId = _targetID;
			let docId = USER_ID;
			obj = {};
			obj.target = targetId;
			obj.from_who = docId;
			obj.status = -1,
				obj.ot = 1;
			obj.data = t.innerHTML;
			//obj.data = t.childNodes[0].innerHTML;
			obj.incise = false;
			obj.isLongData = false;
			sendMSG(obj);
			setTimeout(function() {
				t.style.backgroundColor = 'white';
			}, 500);
		}

		/**
		 * 切换窗口
		 */
		function checkScore() {
			document.getElementsByClassName('cdt-menu')[0].style.visibility = 'visible';
			let a = document.getElementsByClassName('content1');
			let b = document.getElementsByClassName('content2');
			for (let i = 0; i < a.length; i++) {
				b[i].style.display = getComputedStyle(a[i], null).getPropertyValue('display');
				a[i].style.display = 'none';
			}
			document.getElementsByClassName('back')[0].style.display = 'initial';
		}
		/**
		 * 返回上一层
		 */
		function backPage() {
			document.getElementsByClassName('cdt-menu')[0].style.visibility = 'hidden';
			document.getElementsByClassName('back')[0].style.display = 'none';
			let a = document.getElementsByClassName('content1');
			let b = document.getElementsByClassName('content2');
			for (let i = 0; i < a.length; i++) {
				a[i].style.display = getComputedStyle(b[i], null).getPropertyValue('display');
				b[i].style.display = 'none';
			}
		}

		/**
		 * 打印报告
		 */
		function createReport() {

			if (isPrint == false) {
				let date = new Date().toLocaleString('chinese', {
					hour12: false
				});
				date = date.replace(/\//g, '-')
				if (reportTime == null)
					reportTime = date;
				sstorage.setItem('&20', RESULT_DATA);
				let o = {
					aiTestTime: reportTime,
					aiUserId: userMsg.aiUserId,
					aiUserName: userMsg.aiUserName,
					aiScaleName: '连线测验',
					reportContent: JSON.stringify(RESULT_DATA),
					aiScaleId: 20,
					msg: userMsg,
					aiDocId: USER_ID,
					startTime: sstorage.getItem('date')
				}
				$.ajax({
					url: config.url + '/report/op/Max',
					type: 'POST',
					data: {
						value: JSON.stringify(o)
					},
					async: false,
					success: function(e) {
						console.log(e)
					}
				})
			}
			isPrint = true;
			//需要先将结果数据提交给服务器
			window.open("report/report.html")
			var scales = sstorage.getItem("scaleRest");
			let x = -1;
			for (let i = 0; i < scales.items.length; i++) {
				if (scales.items[i].aiScaleId == 20)
					x = i;
			}
			if (x + 1 == scales.items.length) {
				let o = {
					target: sstorage.getItem('userMsg').aiUserId,
					status: 3,
					from_who: USER_ID
				}
				sendMSG(o)
				location.href = 'finish.html'
			}
		}

		/**
		 * websocket连接
		 */
		var websocket = null;
		if ('WebSocket' in window) {

		} else {

		}
		websocket = new WebSocket(config.wsURL + '/websocket/' + USER_ID)
		websocket.onopen = function(e) {
			console.log('建立连接')
		}

		websocket.onclose = function(e) {
			console.log('连接关闭')
		}


		var flag = false;
		var src = '';
		websocket.onmessage = function(e) {
			//console.log(e)
			
			try {
				let data = JSON.parse(e.data);
				if(data.data.length>300)
				document.getElementById('re-img').src = data.data;
				let arr = data.ot;
				console.log(arr)
				let n = 0,f = arr[0];
					if (arr.length > 0) {
						if (f != 1)
							n++;
						for (let i = 1; i < arr.length; i++) {
							if (arr[i] == 'A')
								arr[i] = 1;
							if (arr[i] == 'B')
								arr[i] = 2;
							if (arr[i] == 'C')
								arr[i] = 3;
							if (arr[i] == 'D')
								arr[i] = 4;
							if (arr[i] == 'E')
								arr[i] = 5;
							if (arr[i] == 'F')
								arr[i] = 6;
							if (arr[i] == 'G')
								arr[i] = 7;
							if (arr[i] == 'I')
								arr[i] = 8;
							if (arr[i] == 'J')
								arr[i] = 9;
							if (arr[i] == 'K')
								arr[i] = 10;
							if (arr[i] == 'L')
								arr[i] = 11;
							if (arr[i] == 'M')
								arr[i] = 12;
							if (arr[i] == 'N')
								arr[i] = 13;
							if (arr[i] == 'O')
								arr[i] = 14;
							if (arr[i] == 'P')
								arr[i] = 15;
							if (arr[i] != f + 1 && arr[i] != f)
								n++;
							f = arr[i]
						}
					}
				console.log(n)
				//do_time.error_con = n;
				//console.log(e.data)
				// if (data.endIncise) {
				// 	src += data.data;
				// 	document.getElementById('re-img').src = src;
				// 	//console.log(src);
				// 	src = "";
				// } else if (data.data != 'undefined') {
				// 	src += data.data;
				// }
			} catch (e) {
				console.log(e)
				//TODO handle the exception
			}

		}

		function sendMSG(obj) {
			websocket.send(JSON.stringify(obj));
		}

		websocket.onerror = function() {
			console.log('建立连接出错')
		}
		window.onbeforeunload = function() {
			websocket.close();
		}
		
		var scales = sstorage.getItem("scaleRest");
		let x = -1;
		for (let i = 0; i < scales.items.length; i++) {
			if (scales.items[i].aiScaleId == 20)
				x = i;
		}
		if (x + 1 == scales.items.length) {
			document.getElementById('f').style.display = 'none'
		}
	</script>
</html>
